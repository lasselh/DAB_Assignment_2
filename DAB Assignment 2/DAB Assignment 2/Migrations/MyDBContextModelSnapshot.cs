// <auto-generated />
using DAB2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAB_Assignment_2.Migrations
{
    [DbContext(typeof(MyDBContext))]
    partial class MyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DAB2.Citizen", b =>
                {
                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicipalityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.HasKey("SocialSecurityNumber");

                    b.HasIndex("MunicipalityID");

                    b.ToTable("Citizen");
                });

            modelBuilder.Entity("DAB2.Location", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicipalityID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Address");

                    b.HasIndex("MunicipalityID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("DAB2.LocationCitizen", b =>
                {
                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("date")
                        .HasColumnType("TEXT");

                    b.HasKey("SocialSecurityNumber");

                    b.HasIndex("Address");

                    b.ToTable("LocationCitizen");
                });

            modelBuilder.Entity("DAB2.Municipality", b =>
                {
                    b.Property<int>("MunicipalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<float>("Population")
                        .HasColumnType("REAL");

                    b.Property<string>("nationName")
                        .HasColumnType("TEXT");

                    b.HasKey("MunicipalityID");

                    b.HasIndex("nationName");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("DAB2.Nation", b =>
                {
                    b.Property<string>("nationName")
                        .HasColumnType("TEXT");

                    b.HasKey("nationName");

                    b.ToTable("Nation");
                });

            modelBuilder.Entity("DAB2.TestCenter", b =>
                {
                    b.Property<int>("TestCenterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hours")
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicipalityID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TestCenterID");

                    b.HasIndex("MunicipalityID");

                    b.ToTable("TestCenter");
                });

            modelBuilder.Entity("DAB2.TestCenterCitizen", b =>
                {
                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestCenterID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("result")
                        .HasColumnType("INTEGER");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.HasKey("SocialSecurityNumber");

                    b.HasIndex("TestCenterID");

                    b.ToTable("TestCenterCitizen");
                });

            modelBuilder.Entity("DAB2.TestCenterManagement", b =>
                {
                    b.Property<int>("PhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestCenterID")
                        .HasColumnType("INTEGER");

                    b.HasKey("PhoneNumber");

                    b.HasIndex("TestCenterID")
                        .IsUnique();

                    b.ToTable("TestCenterManagement");
                });

            modelBuilder.Entity("DAB2.Citizen", b =>
                {
                    b.HasOne("DAB2.Municipality", "municipality")
                        .WithMany("Citizens")
                        .HasForeignKey("MunicipalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("municipality");
                });

            modelBuilder.Entity("DAB2.Location", b =>
                {
                    b.HasOne("DAB2.Municipality", "municipality")
                        .WithMany("locations")
                        .HasForeignKey("MunicipalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("municipality");
                });

            modelBuilder.Entity("DAB2.LocationCitizen", b =>
                {
                    b.HasOne("DAB2.Location", "location")
                        .WithMany("locationCitizens")
                        .HasForeignKey("Address");

                    b.HasOne("DAB2.Citizen", "citizen")
                        .WithMany("locationCitizens")
                        .HasForeignKey("SocialSecurityNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("citizen");

                    b.Navigation("location");
                });

            modelBuilder.Entity("DAB2.Municipality", b =>
                {
                    b.HasOne("DAB2.Nation", "nation")
                        .WithMany("municipalities")
                        .HasForeignKey("nationName");

                    b.Navigation("nation");
                });

            modelBuilder.Entity("DAB2.TestCenter", b =>
                {
                    b.HasOne("DAB2.Municipality", "municipality")
                        .WithMany("TestCenters")
                        .HasForeignKey("MunicipalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("municipality");
                });

            modelBuilder.Entity("DAB2.TestCenterCitizen", b =>
                {
                    b.HasOne("DAB2.Citizen", "citizen")
                        .WithMany("testCenterCitizens")
                        .HasForeignKey("SocialSecurityNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAB2.TestCenter", "testCenter")
                        .WithMany("testCenterCitizens")
                        .HasForeignKey("TestCenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("citizen");

                    b.Navigation("testCenter");
                });

            modelBuilder.Entity("DAB2.TestCenterManagement", b =>
                {
                    b.HasOne("DAB2.TestCenter", "testcenter")
                        .WithOne("testcentermanagement")
                        .HasForeignKey("DAB2.TestCenterManagement", "TestCenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("testcenter");
                });

            modelBuilder.Entity("DAB2.Citizen", b =>
                {
                    b.Navigation("locationCitizens");

                    b.Navigation("testCenterCitizens");
                });

            modelBuilder.Entity("DAB2.Location", b =>
                {
                    b.Navigation("locationCitizens");
                });

            modelBuilder.Entity("DAB2.Municipality", b =>
                {
                    b.Navigation("Citizens");

                    b.Navigation("locations");

                    b.Navigation("TestCenters");
                });

            modelBuilder.Entity("DAB2.Nation", b =>
                {
                    b.Navigation("municipalities");
                });

            modelBuilder.Entity("DAB2.TestCenter", b =>
                {
                    b.Navigation("testCenterCitizens");

                    b.Navigation("testcentermanagement");
                });
#pragma warning restore 612, 618
        }
    }
}
